// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const CreateMessage = `-- name: CreateMessage :one
INSERT INTO quest_dis_message (
    did, rkey, topic_did, topic_rkey, parent_message_rkey, content, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING did, rkey, topic_did, topic_rkey, parent_message_rkey, content, created_at, updated_at
`

type CreateMessageParams struct {
	Did               string         `json:"did"`
	Rkey              string         `json:"rkey"`
	TopicDid          string         `json:"topic_did"`
	TopicRkey         string         `json:"topic_rkey"`
	ParentMessageRkey sql.NullString `json:"parent_message_rkey"`
	Content           string         `json:"content"`
	CreatedAt         time.Time      `json:"created_at"`
	UpdatedAt         time.Time      `json:"updated_at"`
}

// Messages queries
func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.queryRow(ctx, q.createMessageStmt, CreateMessage,
		arg.Did,
		arg.Rkey,
		arg.TopicDid,
		arg.TopicRkey,
		arg.ParentMessageRkey,
		arg.Content,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Message
	err := row.Scan(
		&i.Did,
		&i.Rkey,
		&i.TopicDid,
		&i.TopicRkey,
		&i.ParentMessageRkey,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const CreateParticipation = `-- name: CreateParticipation :one
INSERT INTO quest_dis_participation (
    did, topic_did, topic_rkey, status, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING did, topic_did, topic_rkey, status, created_at, updated_at
`

type CreateParticipationParams struct {
	Did       string    `json:"did"`
	TopicDid  string    `json:"topic_did"`
	TopicRkey string    `json:"topic_rkey"`
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Participation queries
func (q *Queries) CreateParticipation(ctx context.Context, arg CreateParticipationParams) (Participation, error) {
	row := q.queryRow(ctx, q.createParticipationStmt, CreateParticipation,
		arg.Did,
		arg.TopicDid,
		arg.TopicRkey,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Participation
	err := row.Scan(
		&i.Did,
		&i.TopicDid,
		&i.TopicRkey,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const CreateTopic = `-- name: CreateTopic :one

INSERT INTO quest_dis_topic (
    did, rkey, subject, initial_message, category, created_at, updated_at, selected_answer
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING did, rkey, subject, initial_message, category, created_at, updated_at, selected_answer
`

type CreateTopicParams struct {
	Did            string         `json:"did"`
	Rkey           string         `json:"rkey"`
	Subject        string         `json:"subject"`
	InitialMessage string         `json:"initial_message"`
	Category       sql.NullString `json:"category"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	SelectedAnswer sql.NullString `json:"selected_answer"`
}

// queries.sql - Central SQL query file for dis.quest
// All SQL queries should be added to this file as documented in CLAUDE.md
// Topics queries
func (q *Queries) CreateTopic(ctx context.Context, arg CreateTopicParams) (Topic, error) {
	row := q.queryRow(ctx, q.createTopicStmt, CreateTopic,
		arg.Did,
		arg.Rkey,
		arg.Subject,
		arg.InitialMessage,
		arg.Category,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.SelectedAnswer,
	)
	var i Topic
	err := row.Scan(
		&i.Did,
		&i.Rkey,
		&i.Subject,
		&i.InitialMessage,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SelectedAnswer,
	)
	return i, err
}

const DeleteMessage = `-- name: DeleteMessage :exec
DELETE FROM quest_dis_message
WHERE did = $1 AND rkey = $2
`

type DeleteMessageParams struct {
	Did  string `json:"did"`
	Rkey string `json:"rkey"`
}

func (q *Queries) DeleteMessage(ctx context.Context, arg DeleteMessageParams) error {
	_, err := q.exec(ctx, q.deleteMessageStmt, DeleteMessage, arg.Did, arg.Rkey)
	return err
}

const DeleteParticipation = `-- name: DeleteParticipation :exec
DELETE FROM quest_dis_participation
WHERE did = $1 AND topic_did = $2 AND topic_rkey = $3
`

type DeleteParticipationParams struct {
	Did       string `json:"did"`
	TopicDid  string `json:"topic_did"`
	TopicRkey string `json:"topic_rkey"`
}

func (q *Queries) DeleteParticipation(ctx context.Context, arg DeleteParticipationParams) error {
	_, err := q.exec(ctx, q.deleteParticipationStmt, DeleteParticipation, arg.Did, arg.TopicDid, arg.TopicRkey)
	return err
}

const DeleteTopic = `-- name: DeleteTopic :exec
DELETE FROM quest_dis_topic
WHERE did = $1 AND rkey = $2
`

type DeleteTopicParams struct {
	Did  string `json:"did"`
	Rkey string `json:"rkey"`
}

func (q *Queries) DeleteTopic(ctx context.Context, arg DeleteTopicParams) error {
	_, err := q.exec(ctx, q.deleteTopicStmt, DeleteTopic, arg.Did, arg.Rkey)
	return err
}

const GetMessage = `-- name: GetMessage :one
SELECT did, rkey, topic_did, topic_rkey, parent_message_rkey, content, created_at, updated_at FROM quest_dis_message
WHERE did = $1 AND rkey = $2
`

type GetMessageParams struct {
	Did  string `json:"did"`
	Rkey string `json:"rkey"`
}

func (q *Queries) GetMessage(ctx context.Context, arg GetMessageParams) (Message, error) {
	row := q.queryRow(ctx, q.getMessageStmt, GetMessage, arg.Did, arg.Rkey)
	var i Message
	err := row.Scan(
		&i.Did,
		&i.Rkey,
		&i.TopicDid,
		&i.TopicRkey,
		&i.ParentMessageRkey,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetMessagesByTopic = `-- name: GetMessagesByTopic :many
SELECT did, rkey, topic_did, topic_rkey, parent_message_rkey, content, created_at, updated_at FROM quest_dis_message
WHERE topic_did = $1 AND topic_rkey = $2
ORDER BY created_at ASC
`

type GetMessagesByTopicParams struct {
	TopicDid  string `json:"topic_did"`
	TopicRkey string `json:"topic_rkey"`
}

func (q *Queries) GetMessagesByTopic(ctx context.Context, arg GetMessagesByTopicParams) ([]Message, error) {
	rows, err := q.query(ctx, q.getMessagesByTopicStmt, GetMessagesByTopic, arg.TopicDid, arg.TopicRkey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.Did,
			&i.Rkey,
			&i.TopicDid,
			&i.TopicRkey,
			&i.ParentMessageRkey,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetParticipation = `-- name: GetParticipation :one
SELECT did, topic_did, topic_rkey, status, created_at, updated_at FROM quest_dis_participation
WHERE did = $1 AND topic_did = $2 AND topic_rkey = $3
`

type GetParticipationParams struct {
	Did       string `json:"did"`
	TopicDid  string `json:"topic_did"`
	TopicRkey string `json:"topic_rkey"`
}

func (q *Queries) GetParticipation(ctx context.Context, arg GetParticipationParams) (Participation, error) {
	row := q.queryRow(ctx, q.getParticipationStmt, GetParticipation, arg.Did, arg.TopicDid, arg.TopicRkey)
	var i Participation
	err := row.Scan(
		&i.Did,
		&i.TopicDid,
		&i.TopicRkey,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetParticipationsByTopic = `-- name: GetParticipationsByTopic :many
SELECT did, topic_did, topic_rkey, status, created_at, updated_at FROM quest_dis_participation
WHERE topic_did = $1 AND topic_rkey = $2
`

type GetParticipationsByTopicParams struct {
	TopicDid  string `json:"topic_did"`
	TopicRkey string `json:"topic_rkey"`
}

func (q *Queries) GetParticipationsByTopic(ctx context.Context, arg GetParticipationsByTopicParams) ([]Participation, error) {
	rows, err := q.query(ctx, q.getParticipationsByTopicStmt, GetParticipationsByTopic, arg.TopicDid, arg.TopicRkey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Participation{}
	for rows.Next() {
		var i Participation
		if err := rows.Scan(
			&i.Did,
			&i.TopicDid,
			&i.TopicRkey,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetParticipationsByUser = `-- name: GetParticipationsByUser :many
SELECT did, topic_did, topic_rkey, status, created_at, updated_at FROM quest_dis_participation
WHERE did = $1
ORDER BY created_at DESC
`

func (q *Queries) GetParticipationsByUser(ctx context.Context, did string) ([]Participation, error) {
	rows, err := q.query(ctx, q.getParticipationsByUserStmt, GetParticipationsByUser, did)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Participation{}
	for rows.Next() {
		var i Participation
		if err := rows.Scan(
			&i.Did,
			&i.TopicDid,
			&i.TopicRkey,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetRepliesByMessage = `-- name: GetRepliesByMessage :many
SELECT did, rkey, topic_did, topic_rkey, parent_message_rkey, content, created_at, updated_at FROM quest_dis_message
WHERE topic_did = $1 AND topic_rkey = $2 AND parent_message_rkey = $3
ORDER BY created_at ASC
`

type GetRepliesByMessageParams struct {
	TopicDid          string         `json:"topic_did"`
	TopicRkey         string         `json:"topic_rkey"`
	ParentMessageRkey sql.NullString `json:"parent_message_rkey"`
}

func (q *Queries) GetRepliesByMessage(ctx context.Context, arg GetRepliesByMessageParams) ([]Message, error) {
	rows, err := q.query(ctx, q.getRepliesByMessageStmt, GetRepliesByMessage, arg.TopicDid, arg.TopicRkey, arg.ParentMessageRkey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.Did,
			&i.Rkey,
			&i.TopicDid,
			&i.TopicRkey,
			&i.ParentMessageRkey,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTopic = `-- name: GetTopic :one
SELECT did, rkey, subject, initial_message, category, created_at, updated_at, selected_answer FROM quest_dis_topic
WHERE did = $1 AND rkey = $2
`

type GetTopicParams struct {
	Did  string `json:"did"`
	Rkey string `json:"rkey"`
}

func (q *Queries) GetTopic(ctx context.Context, arg GetTopicParams) (Topic, error) {
	row := q.queryRow(ctx, q.getTopicStmt, GetTopic, arg.Did, arg.Rkey)
	var i Topic
	err := row.Scan(
		&i.Did,
		&i.Rkey,
		&i.Subject,
		&i.InitialMessage,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SelectedAnswer,
	)
	return i, err
}

const GetTopicsByCategory = `-- name: GetTopicsByCategory :many
SELECT did, rkey, subject, initial_message, category, created_at, updated_at, selected_answer FROM quest_dis_topic
WHERE category = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetTopicsByCategoryParams struct {
	Category sql.NullString `json:"category"`
	Limit    int32          `json:"limit"`
}

func (q *Queries) GetTopicsByCategory(ctx context.Context, arg GetTopicsByCategoryParams) ([]Topic, error) {
	rows, err := q.query(ctx, q.getTopicsByCategoryStmt, GetTopicsByCategory, arg.Category, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Topic{}
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.Did,
			&i.Rkey,
			&i.Subject,
			&i.InitialMessage,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SelectedAnswer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTopicsByDID = `-- name: GetTopicsByDID :many
SELECT did, rkey, subject, initial_message, category, created_at, updated_at, selected_answer FROM quest_dis_topic
WHERE did = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTopicsByDID(ctx context.Context, did string) ([]Topic, error) {
	rows, err := q.query(ctx, q.getTopicsByDIDStmt, GetTopicsByDID, did)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Topic{}
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.Did,
			&i.Rkey,
			&i.Subject,
			&i.InitialMessage,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SelectedAnswer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTopics = `-- name: ListTopics :many
SELECT did, rkey, subject, initial_message, category, created_at, updated_at, selected_answer FROM quest_dis_topic
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListTopicsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTopics(ctx context.Context, arg ListTopicsParams) ([]Topic, error) {
	rows, err := q.query(ctx, q.listTopicsStmt, ListTopics, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Topic{}
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.Did,
			&i.Rkey,
			&i.Subject,
			&i.InitialMessage,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SelectedAnswer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateParticipationStatus = `-- name: UpdateParticipationStatus :exec
UPDATE quest_dis_participation
SET status = $1, updated_at = $2
WHERE did = $3 AND topic_did = $4 AND topic_rkey = $5
`

type UpdateParticipationStatusParams struct {
	Status    string    `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
	Did       string    `json:"did"`
	TopicDid  string    `json:"topic_did"`
	TopicRkey string    `json:"topic_rkey"`
}

func (q *Queries) UpdateParticipationStatus(ctx context.Context, arg UpdateParticipationStatusParams) error {
	_, err := q.exec(ctx, q.updateParticipationStatusStmt, UpdateParticipationStatus,
		arg.Status,
		arg.UpdatedAt,
		arg.Did,
		arg.TopicDid,
		arg.TopicRkey,
	)
	return err
}

const UpdateTopicSelectedAnswer = `-- name: UpdateTopicSelectedAnswer :exec
UPDATE quest_dis_topic
SET selected_answer = $1, updated_at = $2
WHERE did = $3 AND rkey = $4
`

type UpdateTopicSelectedAnswerParams struct {
	SelectedAnswer sql.NullString `json:"selected_answer"`
	UpdatedAt      time.Time      `json:"updated_at"`
	Did            string         `json:"did"`
	Rkey           string         `json:"rkey"`
}

func (q *Queries) UpdateTopicSelectedAnswer(ctx context.Context, arg UpdateTopicSelectedAnswerParams) error {
	_, err := q.exec(ctx, q.updateTopicSelectedAnswerStmt, UpdateTopicSelectedAnswer,
		arg.SelectedAnswer,
		arg.UpdatedAt,
		arg.Did,
		arg.Rkey,
	)
	return err
}
