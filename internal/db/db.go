// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createMessageStmt, err = db.PrepareContext(ctx, CreateMessage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMessage: %w", err)
	}
	if q.createParticipationStmt, err = db.PrepareContext(ctx, CreateParticipation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateParticipation: %w", err)
	}
	if q.createTopicStmt, err = db.PrepareContext(ctx, CreateTopic); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTopic: %w", err)
	}
	if q.deleteMessageStmt, err = db.PrepareContext(ctx, DeleteMessage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMessage: %w", err)
	}
	if q.deleteParticipationStmt, err = db.PrepareContext(ctx, DeleteParticipation); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteParticipation: %w", err)
	}
	if q.deleteTopicStmt, err = db.PrepareContext(ctx, DeleteTopic); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTopic: %w", err)
	}
	if q.getMessageStmt, err = db.PrepareContext(ctx, GetMessage); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessage: %w", err)
	}
	if q.getMessagesByTopicStmt, err = db.PrepareContext(ctx, GetMessagesByTopic); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessagesByTopic: %w", err)
	}
	if q.getParticipationStmt, err = db.PrepareContext(ctx, GetParticipation); err != nil {
		return nil, fmt.Errorf("error preparing query GetParticipation: %w", err)
	}
	if q.getParticipationsByTopicStmt, err = db.PrepareContext(ctx, GetParticipationsByTopic); err != nil {
		return nil, fmt.Errorf("error preparing query GetParticipationsByTopic: %w", err)
	}
	if q.getParticipationsByUserStmt, err = db.PrepareContext(ctx, GetParticipationsByUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetParticipationsByUser: %w", err)
	}
	if q.getRepliesByMessageStmt, err = db.PrepareContext(ctx, GetRepliesByMessage); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepliesByMessage: %w", err)
	}
	if q.getTopicStmt, err = db.PrepareContext(ctx, GetTopic); err != nil {
		return nil, fmt.Errorf("error preparing query GetTopic: %w", err)
	}
	if q.getTopicsByCategoryStmt, err = db.PrepareContext(ctx, GetTopicsByCategory); err != nil {
		return nil, fmt.Errorf("error preparing query GetTopicsByCategory: %w", err)
	}
	if q.listTopicsStmt, err = db.PrepareContext(ctx, ListTopics); err != nil {
		return nil, fmt.Errorf("error preparing query ListTopics: %w", err)
	}
	if q.updateParticipationStatusStmt, err = db.PrepareContext(ctx, UpdateParticipationStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateParticipationStatus: %w", err)
	}
	if q.updateTopicSelectedAnswerStmt, err = db.PrepareContext(ctx, UpdateTopicSelectedAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTopicSelectedAnswer: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createMessageStmt != nil {
		if cerr := q.createMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMessageStmt: %w", cerr)
		}
	}
	if q.createParticipationStmt != nil {
		if cerr := q.createParticipationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createParticipationStmt: %w", cerr)
		}
	}
	if q.createTopicStmt != nil {
		if cerr := q.createTopicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTopicStmt: %w", cerr)
		}
	}
	if q.deleteMessageStmt != nil {
		if cerr := q.deleteMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMessageStmt: %w", cerr)
		}
	}
	if q.deleteParticipationStmt != nil {
		if cerr := q.deleteParticipationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteParticipationStmt: %w", cerr)
		}
	}
	if q.deleteTopicStmt != nil {
		if cerr := q.deleteTopicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTopicStmt: %w", cerr)
		}
	}
	if q.getMessageStmt != nil {
		if cerr := q.getMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessageStmt: %w", cerr)
		}
	}
	if q.getMessagesByTopicStmt != nil {
		if cerr := q.getMessagesByTopicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessagesByTopicStmt: %w", cerr)
		}
	}
	if q.getParticipationStmt != nil {
		if cerr := q.getParticipationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParticipationStmt: %w", cerr)
		}
	}
	if q.getParticipationsByTopicStmt != nil {
		if cerr := q.getParticipationsByTopicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParticipationsByTopicStmt: %w", cerr)
		}
	}
	if q.getParticipationsByUserStmt != nil {
		if cerr := q.getParticipationsByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParticipationsByUserStmt: %w", cerr)
		}
	}
	if q.getRepliesByMessageStmt != nil {
		if cerr := q.getRepliesByMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepliesByMessageStmt: %w", cerr)
		}
	}
	if q.getTopicStmt != nil {
		if cerr := q.getTopicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTopicStmt: %w", cerr)
		}
	}
	if q.getTopicsByCategoryStmt != nil {
		if cerr := q.getTopicsByCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTopicsByCategoryStmt: %w", cerr)
		}
	}
	if q.listTopicsStmt != nil {
		if cerr := q.listTopicsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTopicsStmt: %w", cerr)
		}
	}
	if q.updateParticipationStatusStmt != nil {
		if cerr := q.updateParticipationStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateParticipationStatusStmt: %w", cerr)
		}
	}
	if q.updateTopicSelectedAnswerStmt != nil {
		if cerr := q.updateTopicSelectedAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTopicSelectedAnswerStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	createMessageStmt             *sql.Stmt
	createParticipationStmt       *sql.Stmt
	createTopicStmt               *sql.Stmt
	deleteMessageStmt             *sql.Stmt
	deleteParticipationStmt       *sql.Stmt
	deleteTopicStmt               *sql.Stmt
	getMessageStmt                *sql.Stmt
	getMessagesByTopicStmt        *sql.Stmt
	getParticipationStmt          *sql.Stmt
	getParticipationsByTopicStmt  *sql.Stmt
	getParticipationsByUserStmt   *sql.Stmt
	getRepliesByMessageStmt       *sql.Stmt
	getTopicStmt                  *sql.Stmt
	getTopicsByCategoryStmt       *sql.Stmt
	listTopicsStmt                *sql.Stmt
	updateParticipationStatusStmt *sql.Stmt
	updateTopicSelectedAnswerStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		createMessageStmt:             q.createMessageStmt,
		createParticipationStmt:       q.createParticipationStmt,
		createTopicStmt:               q.createTopicStmt,
		deleteMessageStmt:             q.deleteMessageStmt,
		deleteParticipationStmt:       q.deleteParticipationStmt,
		deleteTopicStmt:               q.deleteTopicStmt,
		getMessageStmt:                q.getMessageStmt,
		getMessagesByTopicStmt:        q.getMessagesByTopicStmt,
		getParticipationStmt:          q.getParticipationStmt,
		getParticipationsByTopicStmt:  q.getParticipationsByTopicStmt,
		getParticipationsByUserStmt:   q.getParticipationsByUserStmt,
		getRepliesByMessageStmt:       q.getRepliesByMessageStmt,
		getTopicStmt:                  q.getTopicStmt,
		getTopicsByCategoryStmt:       q.getTopicsByCategoryStmt,
		listTopicsStmt:                q.listTopicsStmt,
		updateParticipationStatusStmt: q.updateParticipationStatusStmt,
		updateTopicSelectedAnswerStmt: q.updateTopicSelectedAnswerStmt,
	}
}
