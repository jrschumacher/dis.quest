// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.898
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"time"
)

func getInitialSignals(data DevPDSPageData) string {
	testDID := "did:plc:test123456789"
	if data.HasAuth {
		testDID = data.UserDID
	}
	return fmt.Sprintf(`{"testDID": "%s", "topicURI": "at://did:plc:test123/quest.dis.topic/topic-123", "results": [], "operation": ""}`, testDID)
}

type DevPDSPageData struct {
	Title           string
	HasAuth         bool
	UserDID         string
	TestResults     []interface{} // Will be handled by Datastar signals
	TokenExpired    bool
	TokenExpiration time.Time
}

func DevPDSPage(data DevPDSPageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"container\" data-signals=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(getInitialSignals(data))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/dev_pds.templ`, Line: 26, Col: 61}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\"><h1>üîß PDS Development Tools</h1><p>Test and validate ATProtocol PDS functionality</p><!-- Authentication Status -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !data.HasAuth {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"alert alert-error\"><h3>üö´ Authentication Required</h3><p><strong>You must be logged in to test PDS functionality.</strong></p><p><a href=\"/login?redirect=%2Fdev%2Fpds\" class=\"button\">Login with Bluesky</a></p></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else if data.TokenExpired {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div class=\"alert alert-error\"><h3>‚è∞ Session Expired</h3><p><strong>Your access token has expired and PDS tests will fail.</strong></p><p>Token expired at: <code>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(data.TokenExpiration.Format("2006-01-02 15:04:05 MST"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/dev_pds.templ`, Line: 41, Col: 87}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</code></p><p><a href=\"/login?redirect=%2Fdev%2Fpds\" class=\"button\">Re-login to Refresh Token</a></p></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<div class=\"alert alert-success\"><h3>‚úÖ Authenticated & Ready</h3><p>Your DID: <code>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(data.UserDID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/dev_pds.templ`, Line: 47, Col: 37}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</code></p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if !data.TokenExpiration.IsZero() {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<p><small>Token expires: ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(data.TokenExpiration.Format("2006-01-02 15:04:05 MST"))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/dev_pds.templ`, Line: 49, Col: 86}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</small></p>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<div style=\"margin-top: 1rem;\"><a href=\"/auth/logout?redirect=%2Fdev%2Fpds\" class=\"button button-secondary\" style=\"margin-right: 0.5rem;\">üîÑ Force Re-authenticate</a> <small>Use this if PDS operations fail due to scope issues</small></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<div class=\"grid\"><!-- Test Controls --><div><h2>Test Operations</h2><details open><summary>Lexicon & Validation Tests</summary><div class=\"test-section\"><button data-on-click=\"$operation = 'validate_lexicons'; @post('/dev/pds/test')\">Test Lexicon Validation</button><p><small>Tests quest.dis.topic schema validation</small></p></div></details> <details open><summary>URI & Parsing Tests</summary><div class=\"test-section\"><button data-on-click=\"$operation = 'test_uri_parsing'; @post('/dev/pds/test')\">Test AT URI Parsing</button><p><small>Tests parsing of at:// URIs</small></p></div></details> <details open><summary>PDS Simulation Tests</summary><div class=\"test-section\"><label>Test DID:</label> <input type=\"text\" data-bind=\"$testDID\" placeholder=\"did:plc:test123456789\"> <button data-on-click=\"$operation = 'simulate_create_topic'; @post('/dev/pds/test')\">Simulate Create Topic</button> <label>Topic URI:</label> <input type=\"text\" data-bind=\"$topicURI\" placeholder=\"at://did:plc:test123/quest.dis.topic/topic-123\"> <button data-on-click=\"$operation = 'simulate_get_topic'; @post('/dev/pds/test')\">Simulate Get Topic</button><p><small>Tests PDS operations without real HTTP calls</small></p></div></details> <details open><summary>Real PDS Structure Tests</summary><div class=\"test-section\"><button data-on-click=\"$operation = 'test_real_pds_structure'; @post('/dev/pds/test')\">Test Real PDS Structure</button><p><small>Tests what would be sent to real PDS (expects auth failure)</small></p></div></details> <details open><summary>Real PDS Browsing</summary><div class=\"test-section\"><button data-on-click=\"$operation = 'browse_real_pds'; @post('/dev/pds/test')\">Browse Real PDS Structure</button><p><small>Attempts to browse your actual PDS (shows auth requirements)</small></p><button data-on-click=\"$operation = 'list_pds_topics'; @post('/dev/pds/test')\">List PDS Topics</button><p><small>Shows what's needed to list your quest.dis.topic records</small></p><button data-on-click=\"$operation = 'get_pds_record'; @post('/dev/pds/test')\">Get PDS Record</button><p><small>Tests retrieving a specific record by AT URI</small></p><button data-on-click=\"$operation = 'create_random_topic'; @post('/dev/pds/test')\">Create Random Topic</button><p><small>Creates a real topic with random data in your PDS</small></p><button data-on-click=\"$operation = 'test_standard_post'; @post('/dev/pds/test')\" class=\"button button-secondary\">Test Standard Post</button><p><small>Creates a standard Bluesky post to test DPoP implementation</small></p><button data-on-click=\"$operation = 'test_session_auth'; @post('/dev/pds/test')\" class=\"button button-secondary\">Test Session Auth (WhiteWind Style)</button><p><small>Tests session-based auth approach that bypasses OAuth scope restrictions</small></p><button data-on-click=\"$operation = 'check_server_scopes'; @post('/dev/pds/test')\" class=\"button\">Check Server Scopes</button><p><small>Shows what OAuth scopes the authorization server supports</small></p></div></details> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if data.HasAuth {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<details><summary>üîì Authenticated PDS Access</summary><div class=\"test-section\"><p><strong>Your DID:</strong> <code>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(data.UserDID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/dev_pds.templ`, Line: 195, Col: 57}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "</code></p><p><strong>Next:</strong> Wire up your access token to see real records!</p><p><small>With auth integration, you could see actual quest.dis.* records in your PDS</small></p></div></details>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "</div><!-- Results Panel --><div><h2>Test Results</h2><div id=\"test-results\"><p><em>Run tests to see results here...</em></p></div></div></div><!-- Current Implementation Status --><details><summary>üìã Implementation Status</summary><div class=\"status-grid\"><div class=\"status-item completed\"><h4>‚úÖ XRPC Client</h4><p>Generic ATProtocol operations</p></div><div class=\"status-item completed\"><h4>‚úÖ Lexicon Framework</h4><p>quest.dis.* schema validation</p></div><div class=\"status-item completed\"><h4>‚úÖ Real PDS Service</h4><p>Production implementation</p></div><div class=\"status-item pending\"><h4>üîÑ Access Token Integration</h4><p>User session ‚Üí PDS auth</p></div><div class=\"status-item pending\"><h4>üîÑ DPoP Headers</h4><p>Enhanced security</p></div></div></details><style>\n\t\t\t.test-section {\n\t\t\t\tmargin: 1rem 0;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tborder: 1px solid var(--muted-border-color);\n\t\t\t\tborder-radius: 0.5rem;\n\t\t\t}\n\t\t\t.test-section button {\n\t\t\t\tmargin: 0.5rem 0;\n\t\t\t}\n\t\t\t.test-section input {\n\t\t\t\twidth: 100%;\n\t\t\t\tmargin: 0.5rem 0;\n\t\t\t}\n\t\t\t.test-result {\n\t\t\t\tmargin: 1rem 0;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tborder-radius: 0.5rem;\n\t\t\t\tborder: 1px solid;\n\t\t\t}\n\t\t\t.result-success {\n\t\t\t\tborder-color: var(--valid-color, green);\n\t\t\t\tbackground-color: color-mix(in srgb, var(--valid-color, green) 10%, transparent);\n\t\t\t}\n\t\t\t.result-error {\n\t\t\t\tborder-color: var(--invalid-color, red);\n\t\t\t\tbackground-color: color-mix(in srgb, var(--invalid-color, red) 10%, transparent);\n\t\t\t}\n\t\t\t.result-details {\n\t\t\t\tbackground: var(--code-background-color, #f5f5f5);\n\t\t\t\tpadding: 0.5rem;\n\t\t\t\tborder-radius: 0.25rem;\n\t\t\t\tfont-family: monospace;\n\t\t\t\twhite-space: pre-wrap;\n\t\t\t}\n\t\t\t.status-grid {\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n\t\t\t\tgap: 1rem;\n\t\t\t\tmargin: 1rem 0;\n\t\t\t}\n\t\t\t.status-item {\n\t\t\t\tpadding: 1rem;\n\t\t\t\tborder-radius: 0.5rem;\n\t\t\t\tborder: 1px solid;\n\t\t\t}\n\t\t\t.status-item.completed {\n\t\t\t\tborder-color: var(--valid-color, green);\n\t\t\t\tbackground-color: color-mix(in srgb, var(--valid-color, green) 10%, transparent);\n\t\t\t}\n\t\t\t.status-item.pending {\n\t\t\t\tborder-color: var(--warning-color, orange);\n\t\t\t\tbackground-color: color-mix(in srgb, var(--warning-color, orange) 10%, transparent);\n\t\t\t}\n\t\t\t.alert {\n\t\t\t\tpadding: 1rem;\n\t\t\t\tborder-radius: 0.5rem;\n\t\t\t\tmargin: 1rem 0;\n\t\t\t\tborder: 1px solid;\n\t\t\t}\n\t\t\t.alert-success {\n\t\t\t\tborder-color: var(--valid-color, green);\n\t\t\t\tbackground-color: color-mix(in srgb, var(--valid-color, green) 10%, transparent);\n\t\t\t}\n\t\t\t.alert-warning {\n\t\t\t\tborder-color: var(--warning-color, orange);\n\t\t\t\tbackground-color: color-mix(in srgb, var(--warning-color, orange) 10%, transparent);\n\t\t\t}\n\t\t\t.alert-error {\n\t\t\t\tborder-color: var(--invalid-color, red);\n\t\t\t\tbackground-color: color-mix(in srgb, var(--invalid-color, red) 10%, transparent);\n\t\t\t}\n\t\t\t.button {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tpadding: 0.5rem 1rem;\n\t\t\t\tbackground-color: var(--primary-color, #007bff);\n\t\t\t\tcolor: white;\n\t\t\t\ttext-decoration: none;\n\t\t\t\tborder-radius: 0.25rem;\n\t\t\t\tborder: none;\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\t\t\t.button:hover {\n\t\t\t\tbackground-color: var(--primary-hover-color, #0056b3);\n\t\t\t\tcolor: white;\n\t\t\t}\n\t\t\t.button-secondary {\n\t\t\t\tbackground-color: var(--secondary-color, #6c757d);\n\t\t\t\tborder: 1px solid var(--secondary-color, #6c757d);\n\t\t\t}\n\t\t\t.button-secondary:hover {\n\t\t\t\tbackground-color: var(--secondary-hover-color, #545b62);\n\t\t\t\tcolor: white;\n\t\t\t}\n\t\t</style></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
