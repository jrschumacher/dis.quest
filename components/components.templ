package components

import "github.com/jrschumacher/dis.quest/internal/config"

// Modern, simple layout with improved spacing, card design, and subtle color accents
templ Page(appEnv string, content templ.Component) {
	<html>
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>dis.quest ‚Äî Secure ATProtocol Discussions</title>
			<link rel="stylesheet" href="/assets/css/tailwind.css"/>
      <script type="module" defer src="https://cdn.jsdelivr.net/gh/starfederation/datastar@v1.0.0-beta.11/bundles/datastar.js"></script>
		</head>
		<body class="bg-gray-50 font-sans">
			@DevBanner(appEnv)
			<main class="mx-auto">
				if content != nil {
					@content
				}
			</main>
		</body>
	</html>
}

templ DevBanner(appEnv string) {
	if appEnv == config.EnvDev {
		<div class="dev-banner">
			‚ö†Ô∏è DEVELOPMENT MODE ‚Äî Not for production use! ‚ö†Ô∏è
		</div>
	}
}

templ Login() {
	@LoginWithRedirect("")
}

templ LoginWithRedirect(redirectURL string) {
	<section class="mt-20 max-w-md mx-auto">
		<div class="card">
			<h2 class="brand text-center mb-6 text-2xl">Login to <span class="brand">dis.quest</span></h2>
			<form method="get" action="/auth/redirect" class="flex flex-col gap-5">
				<label for="handle" class="font-medium mb-2 block">Handle</label>
				<input type="text" id="handle" name="handle" placeholder="your.handle.bsky.social" required class="rounded-md border border-gray-300 px-3 py-3 text-base" />
				if redirectURL != "" {
					<input type="hidden" name="redirect" value={ redirectURL } />
				}
				<button type="submit" class="btn-main w-full">
					<span>Continue</span>
				</button>
			</form>
		</div>
	</section>
}

type DiscussionSignals struct {
  TopicId string `json:"topicId"`
  Messages []MessageSignals `json:"messages"`
  InitialSignals map[string]any `json:"-"`
}

templ Discussion(signals DiscussionSignals) {
	<section class="mt-8" data-signals={ templ.JSONString(signals.InitialSignals) }>
		<h2 class="mb-6 text-xl font-bold">Discussion Thread</h2>
		<div>
			@Topic()
			<!-- Multiple top-level messages -->
			<div class="mt-8">
				for _, message := range signals.Messages {
					@Message(message)
					<div class="ml-8 mt-4">
						<!-- Nested threaded replies -->
						for _, reply := range message.ThreadedReplies {
							@ThreadMessage(reply)
						}
					</div>
				}
			</div>
		</div>
	</section>
}

templ Topic() {
	<article class="card border border-gray-200 bg-white">
		<h3 class="text-lg font-bold mb-3">Sample Topic Title</h3>
		<p class="text-blue-600 mb-3">This is the start of a discussion topic. Here you can describe the subject and context.</p>
		<small class="text-blue-400 text-sm">by @alice ‚Ä¢ 2025-05-26</small>
	</article>
}

type MessageSignals struct {
  Id     string `json:"id"`
  Author string `json:"author"`
  Date   string `json:"date"`
  Content string  `json:"content"`
  Liked  bool    `json:"liked"`

  ThreadedReplies []MessageSignals `json:"threadedReplies"`
}

templ Message(signals MessageSignals) {
	<article id={ "message-" + signals.Id } class="card border border-gray-200 mb-4">
		<p class="text-lg mb-3">{signals.Content}</p>
		<small class="text-blue-400 text-sm">by {signals.Author} ‚Ä¢ {signals.Date}</small>
		<div class="mt-4 flex gap-2">
			<button class="border border-gray-300 rounded px-2 py-1 text-sm hover:bg-gray-50"
					data-bind={ "liked_" + signals.Id }
					data-on-click={ "$liked_" + signals.Id + " = !$liked_" + signals.Id + "; @post(`/api/messages/" + signals.Id + "/like`)" }>
				<span data-show={ "!$liked_" + signals.Id }>üëç Like</span>
				<span data-show={ "$liked_" + signals.Id }>üëç Liked</span>
			</button>
		</div>
	</article>
}

templ ThreadMessage(signals MessageSignals) {
	<article class="mt-2 p-4 border-l-4 border-blue-600 bg-blue-50 rounded">
		<p class="text-base mb-2">{signals.Content}</p>
		<small class="text-blue-600 text-sm">by {signals.Author} ‚Ä¢ {signals.Date}</small>
	</article>
}
