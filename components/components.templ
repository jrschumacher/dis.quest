package components

import "github.com/jrschumacher/dis.quest/internal/config"

// Modern, simple layout with improved spacing, card design, and subtle color accents
templ Page(appEnv string, content templ.Component) {
	<html>
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>dis.quest ‚Äî Secure ATProtocol Discussions</title>
			<link rel="stylesheet" href="/assets/css/pico/pico.css"/>
      <link rel="stylesheet" href="/assets/css/style.css"/>
      <script type="module" defer src="https://cdn.jsdelivr.net/gh/starfederation/datastar@v1.0.0-beta.11/bundles/datastar.js"></script>
		</head>
		<body>
			@DevBanner(appEnv)
			<main class="container">
				if content != nil {
					@content
				}
			</main>
		</body>
	</html>
}

templ DevBanner(appEnv string) {
	if appEnv == config.EnvDev {
		<div class="dev-banner">
			‚ö†Ô∏è DEVELOPMENT MODE ‚Äî Not for production use! ‚ö†Ô∏è
		</div>
	}
}

templ Login() {
	<section class="login-section">
		<div class="card login-card">
			<h2 class="brand" style="text-align:center; margin-bottom:2rem;">Login to <span class="brand">dis.quest</span></h2>
			<form method="get" action="/auth/redirect" style="display:flex; flex-direction:column; gap:1.2rem;">
				<label for="handle">Handle</label>
				<input type="text" id="handle" name="handle" placeholder="your.handle.bsky.social" required />
				<button type="submit" class="contrast btn-main" style="width:100%;">
					<span>Continue</span>
				</button>
			</form>
		</div>
	</section>
}

type DiscussionSignals struct {
  TopicId string `json:"topicId"`
  Messages []MessageSignals `json:"messages"`
  InitialSignals map[string]any `json:"-"`
}

templ Discussion(signals DiscussionSignals) {
	<section class="discussion-section" data-signals={ templ.JSONString(signals.InitialSignals) }>
		<h2>Discussion Thread</h2>
		<div>
			@Topic()
			<!-- Multiple top-level messages -->
			<div class="messages">
				for _, message := range signals.Messages {
					@Message(message)
					<div class="thread">
						<!-- Nested threaded replies -->
						for _, reply := range message.ThreadedReplies {
							@ThreadMessage(reply)
						}
					</div>
				}
			</div>
		</div>
	</section>
}

templ Topic() {
	<article class="card topic-card">
		<h3>Sample Topic Title</h3>
		<p class="topic-desc">This is the start of a discussion topic. Here you can describe the subject and context.</p>
		<small class="topic-meta">by @alice ‚Ä¢ 2025-05-26</small>
	</article>
}

type MessageSignals struct {
  Id     string `json:"id"`
  Author string `json:"author"`
  Date   string `json:"date"`
  Content string  `json:"content"`
  Liked  bool    `json:"liked"`

  ThreadedReplies []MessageSignals `json:"threadedReplies"`
}

templ Message(signals MessageSignals) {
	<article id={ "message-" + signals.Id } class="card message-card">
		<p class="message-content">{signals.Content}</p>
		<small class="message-meta">by {signals.Author} ‚Ä¢ {signals.Date}</small>
		<div class="message-actions" style="margin-top: 1rem; display: flex; gap: 0.5rem;">
			<button class="outline" style="font-size: 0.8rem; padding: 0.25rem 0.5rem;"
					data-bind={ "liked_" + signals.Id }
					data-on-click={ "$liked_" + signals.Id + " = !$liked_" + signals.Id + "; @post(`/api/messages/" + signals.Id + "/like`)" }>
				<span data-show={ "!$liked_" + signals.Id }>üëç Like</span>
				<span data-show={ "$liked_" + signals.Id }>üëç Liked</span>
			</button>
		</div>
	</article>
}

templ ThreadMessage(signals MessageSignals) {
	<article class="thread-message">
		<p class="thread-content">{signals.Content}</p>
		<small class="thread-meta">by {signals.Author} ‚Ä¢ {signals.Date}</small>
	</article>
}
